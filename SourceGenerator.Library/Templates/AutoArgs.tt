<#@ template language="C#" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
// Auto-generated code
<#
    foreach (var @using in Model.Usings)
    {
        WriteLine(@using);
    }
#>

namespace <#= Model.Namespace #>
{
    public partial class <#= Model.Class #>
    {
<#
    if (Model.HasLogger)
    {
#>
        private readonly ILogger<<#= Model.Class #>> _logger;

<#
    }
#>
        public <#= Model.Class #>(<#= WriteParameters(Model) #>)<#= WriteInitializer(Model) #>
        {
<#
    if (Model.HasLogger)
    {
#>
            this._logger = logger;
<#
    }

    for (var i = 0; i < Model.Fields.Count; i++)
    {
        var field = Model.Fields[i];
        if (field.Ignore)
        {
            continue;
        }

        if (field.IsOptions)
        {
#>
            this.<#= field.Name #> = a<#= i #>.Value;
<#
        }
        else
        {
#>
            this.<#= field.Name #> = a<#= i #>;
<#
        }
    }
#>
        }
    }
}
<#+
    string WriteParameters(AutoArgsModel model)
    {
        var sb = new StringBuilder();
        if (model.HasLogger)
        {
            sb.Append("ILogger<");
            sb.Append(model.Class);
            if (model.Fields.Count == 0)
            {
                sb.Append("> logger");
            }
            else
            {
                sb.Append("> logger, ");
            }
        }

        for (var i = 0; i < model.Fields.Count; i++)
        {
            var field = model.Fields[i];
            sb.Append(field.IsOptions ? $"IOptions<{field.Type}>" : field.Type);
            sb.Append(" a");
            sb.Append(i);

            if (i < model.Fields.Count - 1)
            {
                sb.Append(", ");
            }
        }
        return sb.ToString();
    }

    string WriteArguments(ICollection<Field> fields)
    {
        var sb = new StringBuilder();
        for (var i = 0; i < fields.Count; i++)
        {
            sb.Append("a");
            sb.Append(i);

            if (i < fields.Count - 1)
            {
                sb.Append(", ");
            }
        }
        return sb.ToString();
    }

    string WriteInitializer(AutoArgsModel model)
    {
        if (!model.HasBase)
        {
            return "";
        }

        var sb = new StringBuilder();
        sb.Append(" : this(");
        for (var i = 0; i < model.Fields.Count; i++)
        {
            var field = model.Fields[i];
            if (!field.InBase) continue;
            sb.Append("a");
            sb.Append(i);
            if (i < model.Fields.Count - 1)
            {
                sb.Append(", ");
            }
        }
        sb.Append(")");

        return sb.ToString();
    }
#>