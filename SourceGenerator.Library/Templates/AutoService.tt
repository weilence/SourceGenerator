<#@ template language="C#" #>
// Auto-generated code
using System;

namespace Microsoft.Extensions.DependencyInjection
{
    public static class AutoServiceExtension
    {
        public static IServiceCollection AddAutoServices(this IServiceCollection services, ServiceLifetime lifetime = ServiceLifetime.Singleton)
        {
<#
    foreach (var @class in ClassList)
    {
        var lifetime = "lifetime";
        if (@class.Lifetime != null)
        {
            lifetime = @class.Lifetime;
        }
        if (@class.Types.Count > 0)
        {
            foreach (var type in @class.Types)
            {
#>
            AddService(services, <#= type #>, typeof(<#= @class.Class #>), <#= lifetime #>);
<#
            }
        }
        else
        {
#>
            AddService(services, typeof(<#= @class.Class #>), typeof(<#= @class.Class #>), <#= lifetime #>);
<#
        }
    }
#>
            return services;
        }

        private static void AddService(IServiceCollection services, Type serviceType, Type implementationType, ServiceLifetime lifetime)
        {
            switch (lifetime)
            {
                case ServiceLifetime.Singleton:
                    services.AddSingleton(serviceType, implementationType);
                    break;
                case ServiceLifetime.Scoped:
                    services.AddScoped(serviceType, implementationType);
                    break;
                case ServiceLifetime.Transient:
                    services.AddTransient(serviceType, implementationType);
                    break;
                default:
                    throw new ArgumentOutOfRangeException(nameof(lifetime), lifetime, null);
            }
        }
    }
}
